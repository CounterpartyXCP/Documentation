"use strict";(self.webpackChunkxcpdoc=self.webpackChunkxcpdoc||[]).push([[4009],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),d=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=d(e.components);return a.createElement(l.Provider,{value:t},e.children)},p="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,s=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),p=d(n),u=i,m=p["".concat(l,".").concat(u)]||p[u]||h[u]||s;return n?a.createElement(m,r(r({ref:t},c),{},{components:n})):a.createElement(m,r({ref:t},c))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var s=n.length,r=new Array(s);r[0]=u;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[p]="string"==typeof e?e:i,r[1]=o;for(var d=2;d<s;d++)r[d]=n[d];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},3483:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>s,metadata:()=>o,toc:()=>d});var a=n(7462),i=(n(7294),n(3905));const s={title:"Protocol Specification"},r=void 0,o={unversionedId:"advanced/protocol",id:"advanced/protocol",title:"Protocol Specification",description:"Summary",source:"@site/docs/advanced/protocol.md",sourceDirName:"advanced",slug:"/advanced/protocol",permalink:"/Documentation/docs/advanced/protocol",draft:!1,editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/advanced/protocol.md",tags:[],version:"current",frontMatter:{title:"Protocol Specification"},sidebar:"advanced",previous:{title:"Platform Architecture",permalink:"/Documentation/docs/advanced/architecture"},next:{title:"Command-line (CLI) Guide",permalink:"/Documentation/docs/advanced/cli"}},l={},d=[{value:"Summary",id:"summary",level:2},{value:"Transactions",id:"transactions",level:2},{value:"Non\u2010Counterparty transactions",id:"noncounterparty-transactions",level:2},{value:"mempool transactions",id:"mempool-transactions",level:2},{value:"Assets",id:"assets",level:2},{value:"Subassets",id:"subassets",level:2},{value:"Memos",id:"memos",level:2},{value:"Transaction Statuses",id:"transaction-statuses",level:2},{value:"Message Types",id:"message-types",level:2},{value:"Send",id:"send",level:3},{value:"Order",id:"order",level:3},{value:"Issue",id:"issue",level:3},{value:"Broadcast",id:"broadcast",level:3},{value:"Bet",id:"bet",level:3},{value:"Dividend",id:"dividend",level:3},{value:"Burn",id:"burn",level:3},{value:"Cancel",id:"cancel",level:3},{value:"Destroy",id:"destroy",level:3},{value:"Dispenser",id:"dispenser",level:3}],c={toc:d},p="wrapper";function h(e){let{components:t,...n}=e;return(0,i.kt)(p,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"Counterparty is a suite of financial tools in a protocol built on top of\nthe Bitcoin blockchain and using the blockchain as a service for the\nreliable publication and timestamping of its messages."),(0,i.kt)("p",null,"The reference implementation is ",(0,i.kt)("inlineCode",{parentName:"p"},"counterparty-lib"),", which is hosted at ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/CounterpartyXCP/counterpartyd"},"GitHub"),"."),(0,i.kt)("p",null,"This document describes exclusively the latest version of the\nCounterparty protocol. For historical protocol changes, see the\ncounterparty-lib ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/CounterpartyXCP/counterpartyd/blob/master/ChangeLog.md"},"ChangeLog"),"."),(0,i.kt)("h2",{id:"transactions"},"Transactions"),(0,i.kt)("p",null,"Counterparty messages have the following components:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Source addresses"),(0,i.kt)("li",{parentName:"ul"},"Destination addresses (optional)"),(0,i.kt)("li",{parentName:"ul"},"A quantity of bitcoins sent from the sources to the destinations, if it exists."),(0,i.kt)("li",{parentName:"ul"},"A fee, in bitcoins, paid to the Bitcoin miners who include the transaction in a block."),(0,i.kt)("li",{parentName:"ul"},"Some \u2018data\u2019, imbedded in specially constructed transaction outputs.")),(0,i.kt)("p",null,"Every Bitcoin transaction carrying a Counterparty transaction has the\nfollowing possible outputs:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"zero or more destination outputs,"),(0,i.kt)("li",{parentName:"ul"},"zero or more data outputs, and optional change outputs.")),(0,i.kt)("p",null,"All data outputs follow all destination outputs. Change outputs (outputs after the last data\noutput) have no significance."),(0,i.kt)("p",null,"For identification purposes, every Counterparty transaction\u2019s \u2018data\u2019\nfield is prefixed by the string ",(0,i.kt)("inlineCode",{parentName:"p"},"CNTRPRTY"),", encoded in UTF\u20108. This\nstring is long enough that transactions with outputs containing\npseudo\u2010random data cannot be mistaken for valid Counterparty\ntransactions. In testing (i.e. using the TESTCOIN Counterparty network\non any blockchain), this string is \u2018XX\u2019."),(0,i.kt)("p",null,"Counterparty data may be stored in three different types of outputs, or\nin some combinations of those formats. All of the data is obfuscated by\nARC4 encryption using the transaction identifier (TXID) of the first\nunspent transaction output (UTXO) as the encryption key."),(0,i.kt)("p",null,"Multi\u2010signature data outputs are one\u2010of\u2010three outputs where the first\npublic key is that of the sender, so that the value of the output is\nredeemable, and the second two public keys encode the data, zero\u2010padded\nand prefixed with a length byte."),(0,i.kt)("p",null,"The data may also be stored in ",(0,i.kt)("inlineCode",{parentName:"p"},"OP_RETURN")," outputs or as fake\npubkeyhashes."),(0,i.kt)("p",null,"The existence of the destination outputs, and the significance of the\nsize of the Bitcoin fee and the Bitcoins transacted, depend on the\nCounterparty message type, which is determined by the four bytes in the\ndata field that immediately follow the identification prefix. The rest\nof the data have a formatting specific to the message type, described in\nthe source code."),(0,i.kt)("p",null,"The sources and destinations of a Counterparty transaction are Bitcoin\naddresses, and may be either ",(0,i.kt)("inlineCode",{parentName:"p"},"OP_CHECKSIG")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"OP_CHECKMULTISIG"),"\nBitcoin ScriptPubkeys."),(0,i.kt)("p",null,"All messages are parsed in order, one at a time, ignoring block\nboundaries."),(0,i.kt)("p",null,"Orders, bets, order matches, bet matches and rock\u2010paper\u2010scissor matches\nare expired at the end of blocks."),(0,i.kt)("h2",{id:"noncounterparty-transactions"},"Non\u2010Counterparty transactions"),(0,i.kt)("p",null,"counterparty-lib supports the construction of two kinds of transactions\nthat are not themselves considered Counterparty transactions:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"BTC sends"),(0,i.kt)("li",{parentName:"ul"},"BTC dividends to Counterparty assets")),(0,i.kt)("p",null,"Neither of these two transactions is constructed with a data field."),(0,i.kt)("h2",{id:"mempool-transactions"},"mempool transactions"),(0,i.kt)("p",null,"Always have block index = 9999999 (",(0,i.kt)("inlineCode",{parentName:"p"},"config.MEMPOOL_BLOCK_INDEX"),")."),(0,i.kt)("p",null,"DB changes never persist across sessions."),(0,i.kt)("h2",{id:"assets"},"Assets"),(0,i.kt)("p",null,"All assets except BTC and XCP have the following properties:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Asset name"),(0,i.kt)("li",{parentName:"ul"},"Asset ID"),(0,i.kt)("li",{parentName:"ul"},"Description"),(0,i.kt)("li",{parentName:"ul"},"Divisiblity"),(0,i.kt)("li",{parentName:"ul"},"Callability"),(0,i.kt)("li",{parentName:"ul"},"Call date (if callable)",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"may be delayed with later issuances"))),(0,i.kt)("li",{parentName:"ul"},"Call price (if callable) (non\u2010negative)",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"may be increased with later issuances")))),(0,i.kt)("p",null,"Newly registered asset names will be either (unique) strings of 4 to 12\nuppercase Latin characters (inclusive) not beginning with \u2018A\u2019, or\nintegers between 26^12 + 1 and 256^8 (inclusive), prefixed with \u2018A\u2019.\nAlphabetic asset names will carry a one\u2010time issuance fee (by burn) of\n0.5 XCP and numeric asset names will be freely available. \u2018BTC\u2019 and\n\u2018XCP\u2019 are the only three\u2010character asset names. Example asset names:\nBBBB, A100000000000000000."),(0,i.kt)("p",null,"Assets may be either divisible or indivisible, and divisible assets are\ndivisible to eight decimal places. Assets also come with descriptions,\nwhich may be up to 52 single-byte characters long and updated at any time."),(0,i.kt)("h2",{id:"subassets"},"Subassets"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Subasset names must meet following requirements :"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Begin with the parent asset name followed by a period (.)"),(0,i.kt)("li",{parentName:"ul"},"Contain at least 1 character following the parent asset name and a period (.) (e.g. PIZZA.x)"),(0,i.kt)("li",{parentName:"ul"},"Contain up to 250 characters in length including the parent asset name (e.g. PIZZA.REALLY-long-VALID-Subasset-NAME)"),(0,i.kt)("li",{parentName:"ul"},"Contain only characters ",(0,i.kt)("inlineCode",{parentName:"li"},"a-zA-Z0-9.-_@!")),(0,i.kt)("li",{parentName:"ul"},"Cannot end with a period (.)"),(0,i.kt)("li",{parentName:"ul"},"Cannot contain multiple consecutive periods (..)"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"A subasset may only be issued from the same address that owns the parent asset at the time of the issuance")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"A subasset may be transferred to a new owner address after initial issuance")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"A subasset has an anti-spam issuance cost of 0.25 XCP"))),(0,i.kt)("h2",{id:"memos"},"Memos"),(0,i.kt)("p",null,"A Memo can be attached to a send transactions. When a shared public address is used for incoming transactions, a memo may be used to link an incoming payments with a specific user account identifier or invoice.  Memos do not need to be unique.  Multiple sends may have the same memo."),(0,i.kt)("p",null,"The Memo is a numeric value expressed in hexadecimal or a UTF-8 encoded text string. Valid memos are no more than 34 bytes long."),(0,i.kt)("h2",{id:"transaction-statuses"},"Transaction Statuses"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Offers")," (i.e. orders and bets) are given a status ",(0,i.kt)("inlineCode",{parentName:"p"},"filled")," when their\n",(0,i.kt)("inlineCode",{parentName:"p"},"give_remaining"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"get_remaining"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"wager_remaining"),",\n",(0,i.kt)("inlineCode",{parentName:"p"},"counterwager_remaining"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"fee_provided_remaining")," or\n",(0,i.kt)("inlineCode",{parentName:"p"},"fee_required_remaining")," are no longer positive quantities."),(0,i.kt)("p",null,"Because order matches pending BTC payment may be expired, orders\ninvolving Bitcoin cannot be filled, but remain always with a status\n",(0,i.kt)("inlineCode",{parentName:"p"},"open"),"."),(0,i.kt)("h2",{id:"message-types"},"Message Types"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Send"),(0,i.kt)("li",{parentName:"ul"},"Order"),(0,i.kt)("li",{parentName:"ul"},"BTCPay"),(0,i.kt)("li",{parentName:"ul"},"Issue"),(0,i.kt)("li",{parentName:"ul"},"Broadcast"),(0,i.kt)("li",{parentName:"ul"},"Bet"),(0,i.kt)("li",{parentName:"ul"},"Dividend"),(0,i.kt)("li",{parentName:"ul"},"Burn"),(0,i.kt)("li",{parentName:"ul"},"Cancel"),(0,i.kt)("li",{parentName:"ul"},"Destroy"),(0,i.kt)("li",{parentName:"ul"},"Dispenser")),(0,i.kt)("h3",{id:"send"},"Send"),(0,i.kt)("p",null,"A ",(0,i.kt)("strong",{parentName:"p"},"send")," message sends a quantity of any Counterparty asset from the\nsource address to the destination address. If the sender does not hold a\nsufficient quantity of that asset at the time that the send message is\nparsed (in the sequence of transactions), then the send is considered an\noversend."),(0,i.kt)("p",null,"Oversends are handled as follows:"),(0,i.kt)("p",null,"1) Oversends using the legacy send transaction type are valid and filled\nas much as they can be\n2) Oversends using the new default enhanced send transaction type after\nblock 489956 are invalid and none of the asset is sent"),(0,i.kt)("p",null,"counterparty-lib supports sending bitcoins, for which no data output is\nused."),(0,i.kt)("h3",{id:"order"},"Order"),(0,i.kt)("p",null,"An \u2018order\u2019 is an offer to ",(0,i.kt)("em",{parentName:"p"},"give")," a particular quantity of a particular\nasset and ",(0,i.kt)("em",{parentName:"p"},"get")," some quantity of some other asset in return. No\ndistinction is drawn between a \u2018buy order\u2019 and a \u2018sell order\u2019. The\nassets being given are escrowed away immediately upon the order being\nparsed. That is, if someone wants to give 1 XCP for 2 BTC, then as soon\nas he publishes that order, his balance of XCP is reduced by one."),(0,i.kt)("p",null,"When an order is seen in the blockchain, the protocol attempts to match\nit, deterministically, with another open order previously seen. Two\nmatched orders are called a \u2018order match\u2019. If either of a order match\u2019s\nconstituent orders involve Bitcoin, then the order match is assigned the\nstatus \u2018pending\u2019 until the necessary BTCPay transaction is published.\nOtherwise, the trade is completed immediately, with the protocol itself\nassigning the participating addresses their new balances."),(0,i.kt)("p",null,"All orders are ",(0,i.kt)("em",{parentName:"p"},"limit orders"),": an asking price is specified in the ratio\nof how much of one would like to get and give; an order is matched to\nthe open order with the best price below the limit, and the order match\nis made at ",(0,i.kt)("em",{parentName:"p"},"that")," price. That is, if there is one open order to sell at\n.11 XCP/ASST, another at .12 XCP/ASST, and another at .145 XCP/BTC, then\na new order to buy at .14 XCP/ASST will be matched to the first sell\norder first, and the XCP and BTC will be traded at a price of .11\nXCP/ASST, and then if any are left, they\u2019ll be sold at .12 XCP/ASST. If\ntwo existing orders have the same price, then the one made earlier will\nmatch first."),(0,i.kt)("p",null,"All orders allow for partial execution; there are no all\u2010or\u2010none orders.\nIf, in the previous example, the party buying the bitcoins wanted to buy\nmore than the first sell offer had available, then the rest of the buy\norder would be filled by the latter existing order. After all possible\norder matches are made, the current (buy) order is listed as an open\norder itself. If there exist multiple open orders at the same price,\nthen order that was placed earlier is matched first."),(0,i.kt)("p",null,"Open orders expire after they have been open for a user\u2010specified number\nof blocks. When an order expires, all escrowed funds are returned to the\nparties that originally had them."),(0,i.kt)("p",null,"Order Matches waiting for Bitcoin payments expire after twenty blocks; the\nconstituent orders are replenished."),(0,i.kt)("p",null,"In general, there can be no such thing as a fake order, because the\nassets that each party is offering are stored in escrow. However, it is\nimpossible to escrow bitcoins, so those attempting to buy bitcoins may\nask that only orders which pay a fee in bitcoins to Bitcoin miners be\nmatched to their own. On the other hand, when creating an order to sell\nbitcoins, a user may pay whatever fee he likes. Partial orders pay\npartial fees. These fees are designated in the code as ",(0,i.kt)("inlineCode",{parentName:"p"},"fee_required"),"\nand ",(0,i.kt)("inlineCode",{parentName:"p"},"fee_provided"),", and as orders involving BTC are matched (expired),\nthese fees (required and provided) are debited (sometimes replenished),\nin proportion to the fraction of the order that is matched. That is, if\nan order to sell 1 BTC has a ",(0,i.kt)("inlineCode",{parentName:"p"},"fee_provided")," of 0.01 BTC (a 1%), and\nthat order matches for 0.5 BTC initially, then the\n",(0,i.kt)("inlineCode",{parentName:"p"},"fee_provided_remaining")," for that order will thenceforth be 0.005 BTC.\n",(0,i.kt)("em",{parentName:"p"},"Provided")," fees, however, are not replenished upon failure to make BTC\npayments, or their anti\u2010trolling effect would be voided."),(0,i.kt)("p",null,"Payments of bitcoins to close order matches waiting for bitcoins are\ndone with a ",(0,i.kt)("strong",{parentName:"p"},"BTCpay")," message, which stores in its data field only\nthe string concatenation of the transaction hashes which compose the\nOrder Match which it fulfils."),(0,i.kt)("h3",{id:"issue"},"Issue"),(0,i.kt)("p",null,"Assets are issued with the ",(0,i.kt)("strong",{parentName:"p"},"issuance")," message type: the user picks a\nname and a quantity, and the protocol credits his address accordingly.\nThe asset name must either be unique or be one previously issued by the\nsame address. When re\u2010issuing an asset, that is, issuing more of an\nalready\u2010issued asset, the divisibilities and the issuing address must\nmatch."),(0,i.kt)("p",null,"The rights to issue assets under a given name may be transferred to any\nother address."),(0,i.kt)("p",null,"Assets may be locked irreversibly against the issuance of further\nquantities and guaranteeing its holders against its inflation. To lock\nan asset, set the description to \u2018LOCK\u2019 (case\u2010insensitive)."),(0,i.kt)("p",null,"Issuances of any non\u2010zero quantity, that is, issuances which do not\nmerely change, e.g., the description of the asset, involve a debit (and\ndestruction) of now 0.5 XCP."),(0,i.kt)("p",null,"Asset descriptions in enhanced asset information schema may be of\narbitrary length."),(0,i.kt)("h3",{id:"broadcast"},"Broadcast"),(0,i.kt)("p",null,"A ",(0,i.kt)("strong",{parentName:"p"},"broadcast")," message publishes textual and numerical information,\nalong with a timestamp, as part of a series of broadcasts called a\n\u2018feed\u2019. One feed is associated with one address: any broadcast from a\ngiven address is part of that address\u2019s feed. The timestamps of a feed\nmust increase monotonically."),(0,i.kt)("p",null,"Bets are made on the numerical values in a feed, which values may be the\nprices of a currency, or parts of a code for describing discrete\npossible outcomes of a future event, for example. One might describe\nsuch a code with a text like, \u2018US QE on 2014-01-01: dec=1, const=2,\ninc=3\u2019 and announce the results with \u2018US QE on 2014-01-01: decrease!\u2019\nand a value of 1."),(0,i.kt)("p",null,"The publishing of a single broadcast with a textual message equal to\n\u2018LOCK\u2019 (case\u2010insensitive) locks the feed, and prevents it both from\nbeing the source of any further broadcasts and from being the subject of\nany new bets. (If a feed is locked while there are open bets or\nunsettled bet matches that refer to it, then those bets and bet matches\nwill expire harmlessly.)"),(0,i.kt)("p",null,"The text field may be of arbitrary length."),(0,i.kt)("p",null,"A feed is identified by the address which publishes it."),(0,i.kt)("p",null,"Broadcasts with a value of -2 cancel all open bets on the feed.\nBroadcasts with a value of -3 cancel all pending bet matches on the\nfeed. (This is equivalent to waiting for two weeks after the deadline.)\nBroadcasts with any other negative value are ignored for the purpose of\nbet settlement, but they still update the last broadcast time."),(0,i.kt)("h3",{id:"bet"},"Bet"),(0,i.kt)("p",null,"A bet is a wager that the value of a particular feed will be equal (or not\nequal) to a certain value \u2014 the ",(0,i.kt)("em",{parentName:"p"},"target value")," \u2014 at the ",(0,i.kt)("em",{parentName:"p"},"deadline"),". Bets have\ntheir wagers put in escrow upon being matched, and they are settled when the\nfeed that they rely on passes the deadline."),(0,i.kt)("p",null,"Equal/NotEqual Bets cannot be leveraged.  However, for two Bets to be matched,\ntheir leverage levels, deadlines and target values must be identical.\nOtherwise, they are matched the same way that orders are, except a Bet\u2019s ",(0,i.kt)("em",{parentName:"p"},"odds"),"\nare the multiplicative inverse of an order\u2019s price (odds = wager/counterwager):\neach Bet is matched, if possible, to the open Bet with the highest odds, as\nmuch as possible."),(0,i.kt)("p",null,"Target values must be non\u2010negative, and Bet Matches (contracts) are not\naffected by broadcasts with a value of -1."),(0,i.kt)("p",null,"Bets cannot have a deadline later than the timestamp of the last\nbroadcast of the feed that they refer to."),(0,i.kt)("p",null,"Bets expire the same way that orders do, i.e. after a particular number\nof blocks. Bet Matches expire 2016 blocks after a block is seen with a\nblock timestamp after its deadline."),(0,i.kt)("p",null,"Betting fees are proportional to the initial wagers, not the earnings.\nThey are taken from, not added to, the quantities wagered."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Because of the block time, and the non\u2010deterministic way in which\ntransactions are ordered in the blockchain, all contracts must not be\nincrementally settled, but the funds in question must be immediately\nput into escrow, and there must be a settlement date. Otherwise, one\ncould see a price drop coming, and \u2018fight\u2019 to hide the funds that\nwere going to be deducted.")),(0,i.kt)("p",null,"Feed fees are deducted from the final settlement amount."),(0,i.kt)("h3",{id:"dividend"},"Dividend"),(0,i.kt)("p",null,"A dividend payment is a payment of some quantity of any Counterparty\nasset (including BTC) to every holder of a an asset (except BTC or XCP)\nin proportion to the size of their holdings. Dividend\u2010yielding assets\nmay be either divisible or indivisible. A dividend payment to any asset\nmay originate from any address. The asset for dividend payments and the\nassets whose holders receive the payments may be the same. Bitcoin\ndividend payments do not employ the Counterparty protocol and so are\nlarger and more expensive (in fees) than all other dividend payments."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"TODO: dividends on escrowed funds")),(0,i.kt)("p",null,"There is a small anti-spam fee of 0.0002 XCP per recipient with dividends."),(0,i.kt)("h3",{id:"burn"},"Burn"),(0,i.kt)("p",null,"Balances in Counterparty\u2019s native currency, \u2018XCP\u2019, will be initialised\nby \u2018burning\u2019 bitcoins in miners\u2019 fees during a particular period of time\nusing the a ",(0,i.kt)("strong",{parentName:"p"},"burn")," message type. The number of XCP earned per bitcoin\nis calculated thus:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"XCP_EARNED = BTC_BURNED * (1000 * (1 + .5 *\n             ((END_BLOCK - CURRENT_BLOCK) / (END_BLOCK - START_BLOCK))\n             ))\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"END_BLOCK")," is the block after which the burn period is over (",(0,i.kt)("strong",{parentName:"p"},"block #283810"),") and ",(0,i.kt)("inlineCode",{parentName:"p"},"START_BLOCK")," is the block with which the burn period\nbegins (",(0,i.kt)("strong",{parentName:"p"},"block #278310"),"). The earlier the burn, the better the price,\nwhich may be between 1000 and 1500 XCP/BTC."),(0,i.kt)("p",null,"Burn messages have precisely the string \u2018ProofOfBurn\u2019 stored in the\n",(0,i.kt)("inlineCode",{parentName:"p"},"OP_RETURN")," output."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"new data\u2010less burn"),(0,i.kt)("li",{parentName:"ul"},"burn period is over")),(0,i.kt)("h3",{id:"cancel"},"Cancel"),(0,i.kt)("p",null,"Open offers may be cancelled, which cancellation is irrevocable."),(0,i.kt)("p",null,"A ",(0,i.kt)("em",{parentName:"p"},"cancel")," message contains only the hash of the Bitcoin transaction\nthat contains the order or bet to be cancelled. Only the address which\nmade an offer may cancel it."),(0,i.kt)("h3",{id:"destroy"},"Destroy"),(0,i.kt)("p",null,"A ",(0,i.kt)("strong",{parentName:"p"},"destroy")," message sends a quantity of any Counterparty asset from the\nsource address to the default burn address. If the sender does not hold a\nsufficient quantity of that asset at the time that the destroy message is\nparsed (in the sequence of transactions), then the destroy is considered\ninvalid."),(0,i.kt)("h3",{id:"dispenser"},"Dispenser"),(0,i.kt)("p",null,"A dispenser message creates a special type of artifact on the counterparty db\nthat watches an address for incoming main chain asset (BTC). When any BTC reaches\na dispenser enabled address, the amount received gets divided by the dispenser\nmainchainrate (or satoshirate in the db). The quantity rounded down is the\nmultiplier to ",(0,i.kt)("em",{parentName:"p"},"give_quantity")," that is sent to the first address on the sending\ntransaction. All dispensers that can match on an address are triggered by each\nBTC send that has a dispense multiplier of at least 1."),(0,i.kt)("p",null,"A dispenser can be in either of two status: 0 (open) or 10 (closed)."))}h.isMDXComponent=!0}}]);