"use strict";(self.webpackChunkxcpdoc=self.webpackChunkxcpdoc||[]).push([[137],{981:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>u,frontMatter:()=>a,metadata:()=>o,toc:()=>c});var i=t(4848),s=t(8453);const a={title:"How to send Counterparty assets in bulk"},r=void 0,o={id:"advanced/command-line-interface/sending-bulk",title:"How to send Counterparty assets in bulk",description:"Below is a script for constructing, signing and broadcasting a large",source:"@site/docs/advanced/command-line-interface/sending-bulk.md",sourceDirName:"advanced/command-line-interface",slug:"/advanced/command-line-interface/sending-bulk",permalink:"/docs/advanced/command-line-interface/sending-bulk",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/advanced/command-line-interface/sending-bulk.md",tags:[],version:"current",frontMatter:{title:"How to send Counterparty assets in bulk"},sidebar:"advanced",previous:{title:"Command-line (CLI) Guide",permalink:"/docs/advanced/command-line-interface/usage"},next:{title:"Using multisig with counterparty-server",permalink:"/docs/advanced/command-line-interface/multisig"}},d={},c=[{value:"Script",id:"script",level:2},{value:"CSV File",id:"csv-file",level:2},{value:"Instructions",id:"instructions",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"Below is a script for constructing, signing and broadcasting a large\nnumber of sends efficiently. It assumes that the source addresses are in\na (temporarily) unlocked Bitcoin Core wallet, to which a running\ninstance of counterpartyd is connected."}),"\n",(0,i.jsx)(n.p,{children:"This script takes a single command-line argument of the CSV file from\nwhich to pull the sources, destinations, quantities, assets and fees."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Warning"}),": This example is outdated as it used the previous addrindex bitcoin\nbranch, however, same principles apply to current mainline repo."]}),"\n",(0,i.jsx)(n.h2,{id:"script",children:"Script"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"import csv\nimport sys\n\nfrom counterpartylib.lib import util\nfrom counterpartylib.lib import config\nfrom counterpartylib.lib.backend import addrindex\n\nconfig.BACKEND_URL = 'http://user:password@localhost:4000'\nconfig.BACKEND_SSL_NO_VERIFY = False\nconfig.TESTNET = False\nconfig.REQUESTS_TIMEOUT = 5\n\ndef counterparty_api(method, params):\n    return util.api(method, params)\n\ndef bitcoin_api(method, params):\n    return addrindex.rpc(method, params)\n\ndef do_send(source, destination, asset, quantity, fee, encoding):\n    validateaddress = bitcoin_api('validateaddress', [source])\n    assert validateaddress['ismine']\n    pubkey = validateaddress['pubkey']\n    unsigned_tx = counterparty_api('create_send', {'source': source, 'destination': destination, 'asset': asset, 'quantity': quantity, 'pubkey': pubkey, 'allow_unconfirmed_inputs': True})\n    signed_tx = bitcoin_api('signrawtransaction', [unsigned_tx])['hex']\n    tx_hash = bitcoin_api('sendrawtransaction', [signed_tx])\n    return tx_hash\n\n\nwith open(sys.argv[1], 'r') as csvfile:\n      reader = csv.reader(csvfile)\n      print('{}|{}|{}'.format('linenum', 'input', 'result'))\n\n      for row in reader:\n            if reader.line_num == 1:                                            \n                  continue                                                        \n\n            source, destination, asset, quantity, fee = row\n            fee, quantity = int(fee), int(quantity)\n\n            try:\n                  tx_hash = do_send(source, destination, asset, quantity, fee, 'opreturn')\n            except Exception as e:\n                  tx_hash = str(e)\n\n            print('{}|{}|{}'.format(reader.line_num, ','.join(row), tx_hash))\n"})}),"\n",(0,i.jsx)(n.h2,{id:"csv-file",children:"CSV File"}),"\n",(0,i.jsx)(n.p,{children:"All quantities are specified in satoshis. The format of the CSV file is as follows:"}),"\n",(0,i.jsx)(n.p,{children:"source,destination,asset,quantity,fee\nmtQheFaSfWELRB2MyMBaiWjdDm6ux9Ezns,mtQheFaSfWELRB2MyMBaiWjdDm6ux9Ezns,XCP,100000000,150\nmtQheFaSfWELRB2MyMBaiWjdDm6ux9Ezns,mtQheFaSfWELRB2MyMBaiWjdDm6ux9Ezns,XCP,200000000,100"}),"\n",(0,i.jsx)(n.h2,{id:"instructions",children:"Instructions"}),"\n",(0,i.jsxs)(n.p,{children:["Use this script on a system with ",(0,i.jsx)(n.code,{children:"counterparty-core"})," installed and in the ",(0,i.jsx)(n.code,{children:"PYTHONPATH"}),". (If using a Federated Node, this is possible by issuing the command ",(0,i.jsx)(n.code,{children:"fednode shell counterparty"})," or ",(0,i.jsx)(n.code,{children:"fednode shell counterparty-testnet"})," as appropriate, and using the script in that shell.)"]}),"\n",(0,i.jsxs)(n.p,{children:["If the CSV file with the data is called input.csv, and the script is\ncalled sendmany.py, then call this script with\n",(0,i.jsx)(n.code,{children:"$ python3 sendmany.py input.csv"}),"."]})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>o});var i=t(6540);const s={},a=i.createContext(s);function r(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);