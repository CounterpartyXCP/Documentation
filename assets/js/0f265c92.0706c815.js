"use strict";(self.webpackChunkxcpdoc=self.webpackChunkxcpdoc||[]).push([[1564],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>f});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function c(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),u=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):c(c({},t),e)),r},p=function(e){var t=u(e.components);return n.createElement(l.Provider,{value:t},e.children)},s="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),s=u(r),m=a,f=s["".concat(l,".").concat(m)]||s[m]||d[m]||o;return r?n.createElement(f,c(c({ref:t},p),{},{components:r})):n.createElement(f,c({ref:t},p))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,c=new Array(o);c[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[s]="string"==typeof e?e:a,c[1]=i;for(var u=2;u<o;u++)c[u]=r[u];return n.createElement.apply(null,c)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},4642:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>u});var n=r(7462),a=(r(7294),r(3905));const o={title:"Platform Architecture"},c=void 0,i={unversionedId:"advanced/architecture",id:"advanced/architecture",title:"Platform Architecture",description:"In the figure below you can see how all Counterparty platform components interact with each other.",source:"@site/docs/advanced/architecture.md",sourceDirName:"advanced",slug:"/advanced/architecture",permalink:"/Documentation/docs/advanced/architecture",draft:!1,editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/advanced/architecture.md",tags:[],version:"current",frontMatter:{title:"Platform Architecture"},sidebar:"advanced",next:{title:"Protocol Specification",permalink:"/Documentation/docs/advanced/protocol"}},l={},u=[{value:"counterparty-server",id:"counterparty-server",level:2},{value:"counterblock",id:"counterblock",level:2},{value:"Counterwallet",id:"counterwallet",level:2},{value:"armory_utxsvr",id:"armory_utxsvr",level:2}],p={toc:u},s="wrapper";function d(e){let{components:t,...o}=e;return(0,a.kt)(s,(0,n.Z)({},p,o,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"In the figure below you can see how all Counterparty platform components interact with each other."),(0,a.kt)("p",null,(0,a.kt)("img",{src:r(2540).Z,width:"1085",height:"568"})),(0,a.kt)("h2",{id:"counterparty-server"},"counterparty-server"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"counterparty-server")," is the name for the combination of ",(0,a.kt)("inlineCode",{parentName:"p"},"counterparty-lib")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"counterparty-cli"),". It serves as the reference client for Counterparty, and implements support for the core Counterparty protocol via a provided REST API and command line interface."),(0,a.kt)("h2",{id:"counterblock"},"counterblock"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"counterblock")," provides additional services (required by counterwallet and potentially other services) beyond those offered in the API provided by ",(0,a.kt)("inlineCode",{parentName:"p"},"counterparty-server"),". It features a full-fledged JSON RPC-based API, and has an extensible architecture to support custom plugins."),(0,a.kt)("h2",{id:"counterwallet"},"Counterwallet"),(0,a.kt)("p",null,"Counterwallet is a web wallet for Bitcoin (BTC) and Counterparty (XCP). It is being actively developed and currently implements most Counterparty features, such as:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Fully functional wallet for BTC, XCP, and user-created tokens"),(0,a.kt)("li",{parentName:"ul"},"Peer-to-peer asset trading with algorithmic order matching (XCP, other assets)"),(0,a.kt)("li",{parentName:"ul"},"Custom asset creation"),(0,a.kt)("li",{parentName:"ul"},"Betting"),(0,a.kt)("li",{parentName:"ul"},"Broadcasting data on the Bitcoin Blockchain"),(0,a.kt)("li",{parentName:"ul"},"Multisig"),(0,a.kt)("li",{parentName:"ul"},"Offline (Armory) transactions")),(0,a.kt)("h2",{id:"armory_utxsvr"},"armory_utxsvr"),(0,a.kt)("p",null,"A service used by counterblock with Counterwallet to support Offline Armory transactions. This service requires Armory itself."))}d.isMDXComponent=!0},2540:(e,t,r)=>{r.d(t,{Z:()=>n});const n=r.p+"assets/images/platform_architecture-82767f030527fb81f177358ad691861a.png"}}]);